---
title: Deploying a Pivotal Cloud Foundry Product Using BOSH
owner: Ops Manager
---
<p class='note'><strong>Note</strong>: This topic is part of the <a href='./creating.html'>Creating a Pivotal Cloud FoundryÂ® Product Tile</a> tutorial.  Before beginning this procedure, you should confirm that you meet the <a href='./creating.html#prereqs'>tutorial prerequisites</a>.</p>

BOSH is the Cloud Foundry orchestration tool for installing and managing software and virtual machines. A product should install successfully using BOSH before it can be crafted into an Ops Manager tile.

A <i>BOSH release</i> is a software product packaged for BOSH to install. This topic leads you through the process of deploying an example BOSH release, an [Nginx](http://nginx.org/) webserver that serves a "Hello, World" page, onto Amazon Web Services.

Refer to the [BOSH documentation](https://bosh.io/) for more information about how to create your own BOSH release.

## <a id='prep-environment'></a>Step 1: Prepare an Environment

First, you must prepare an environment on your IaaS. This procedure prepares an environment on Amazon Web Services (AWS). The steps differ slightly for other infrastructures, such as vSphere or OpenStack.

1. Open a terminal window and `cd` into the directory you want to work in. From a browser, log into your AWS account. In the following steps you will enter terminal commands and track the results through your browser from your AWS account's EC2 (Elastic Compute Cloud) and VPC (Virtual Private Cloud) dashboards.

1. Run `git clone` to make a local copy of the `example-tile-docs-resources` git repository. This repository contains the BOSH release and configuration files used in this tutorial.
  <pre class='terminal'>
    $ git clone git<span>@</span>github.com:pivotal-cf-experimental/example-tile-docs-resources.git
  </pre>

1. `cd` into the cloned directory:
  <pre class='terminal'>
    $ cd example-tile-docs-resources
  </pre>

1. Create a cryptography key pair called ExampleKeyPair for AWS EC2 and pipe it to a local file named `ExampleKeyPair.pem`:
  <pre class='terminal'>
    aws ec2 create-key-pair --key-name ExampleKeyPair --query 'KeyMaterial' \
    --output text > ExampleKeyPair.pem
  </pre>
 You should now see ExampleKeyPair in your **EC2 Dashboard** under **Key Pairs** and have `~/.aws/config` and `~/.aws/credentials` files in your home directory. If needed, you can undo this step with `aws ec2 delete-key-pair --key-name ExampleKeyPair` and `rm ExampleKeyPair.pem`

1. Use the `aws cloudformation` command to create the small private cloud <i>ExampleStack</i>, by provisioning your AWS account with the resources specified in the file `cloudformation.json`:
  <pre class='terminal'>
    $ aws cloudformation create-stack --stack-name ExampleStack \
    --template-body file://cloudformation.json \
    --parameters ParameterKey=KeyName,ParameterValue=ExampleKeyPair  \
    --capabilities CAPABILITY_IAM
  </pre>
  You should now see ExampleStack in your **VPC Dashboard** under **Your VPCs**, along with an associated Subnet and Security Group, and an EC2 Network Interface. To undo this step, run `aws cloudformation delete-stack --stack-name ExampleStack`

1. Allocate an IP address for your BOSH instance by running the following command:
  <pre class='terminal'>
    $ aws ec2 allocate-address --domain vpc
    {
     "PublicIp": "203.0.113.6",
     "Domain": "vpc",
     "AllocationId": "eipalloc-480ac82d"
    }
  </pre>
To undo this step, release the address under **VPC Dashboard > Elastic IPs**.
<p class="note"><strong>Note</strong>: Record the public IP address returned by this command for use in steps below.</p>

## <a id='provision-bosh'></a>Step 2: Install a BOSH Instance on Your Infrastructure

This step uses the BOSH manifest file `bosh.yml` to configure and install a BOSH instance on your infrastructure. See [Initializing an environment](http://bosh.io/docs/init.html) to learn about deploying BOSH.

1. In the `example-tile-docs-resources` directory, open the file `bosh.yml` in an editor. Follow the instructions in the comments to fill in details specific to your AWS account:
  * Elastic IP: See `aws ec2 allocate-address` above.
  * Subnet: In **VPC Dashboard > Subnets**, use the ID listed for the subnet in the VPC associated with ExampleStack.
  * Availability Zone: Use the Availability Zone listed for the subnet above.
  * Security Group: In **EC2 Dashboard > Security Groups**, use the Group ID for group associated with ExampleStack.
  * AWS Access Key ID and Secret Access Key: This is stored in the local file `~/.aws/credentials`.

1. Run `bosh-init` with your manifest to deploy your BOSH instance:

   <pre class='terminal'>
    $ bosh-init deploy ./bosh.yml
    Deployment manifest: '/Users/d/my-bosh/bosh.yml'
    Deployment state: '/Users/d/my-bosh/bosh-state.json'
    Finished deploying (00:16:35)
    Stopping registry... Finished (00:00:00)
    Cleaning up rendered CPI jobs... Finished (00:00:00)
  </pre>
This command will take some time. To undo this step, terminate the VM running BOSH under **EC2 Dashboard > Instances**, and delete `bosh-state.json` and `~/.bosh_config`.

## <a id='create-manifest'></a>Step 3: Deploy an Application on Your BOSH Instance

This procedure for manual deployment uses the BOSH manifest `example-release.yml` to configure and install the tutorial's example application on your BOSH instance. Manual deployment shows the content of a BOSH manifest and confirms that it composes your BOSH release properly. If you [deploy a product tile with Ops Manager](./deploying-with-ops-man-tile.html), Ops Manager generates a manifest from a template.

1. Target your BOSH to the public IP address allocated above, logging in as admin / admin:
  <pre class='terminal'>
    $ bosh target 203.0.113.6
    Target set to `my-bosh'
    Your username: admin
    Enter password: admin
  </pre>

1. Upload your release, a gzipped tarball with extension .tgz or .pivotal:
  <pre class='terminal'>
    $ bosh upload release example-release-7+dev.2.tgz
      Acting as user 'admin' on 'my-bosh'
      Verifying release...
      Task 29 done
      Started        2015-07-31 00:02:27 UTC
      Finished    2015-07-31 00:02:27 UTC
      Duration    00:00:00
      Release uploaded
  </pre>
To undo this step, run `bosh releases`, copy the release name, and run `bosh delete release RELEASE-NAME`.

1. Upload the latest AWS Xen-HVM Light stemcell to your BOSH:
  <pre class='terminal'>
    $ bosh upload stemcell https:<span>/</span>/bosh.io/d/stemcells/bosh-aws-xen-hvm-ubuntu-trusty-go\_agent?v=3026
      Acting as user 'admin' on 'my-bosh'
      Using remote stemcell \`https:<span>/</span>/bosh.io/d/stemcells/bosh-aws-xen-hvm-ubuntu-trusty-go_agent?v=3026'
      Director task 15
      Started update stemcell
      Started update stemcell > Downloading remote stemcell. Done (00:00:02)
      Started update stemcell > Extracting stemcell archive. Done (00:00:00)
      Started update stemcell > Verifying stemcell manifest. Done (00:00:00)
      Started update stemcell
      Done update stemcell (00:00:11)
      Task 15 done
      Started   2015-07-30 21:23:09 UTC
      Finished  2015-07-30 21:23:20 UTC
      Duration  00:00:11
      Stemcell uploaded and created.
  </pre>
To undo this step, run `bosh deployments`, copy the stemcell name and version, and run `bosh delete stemcell STEMCELL-NAME VERSION`.

1. Use `bosh status` to determine your BOSH Director (BOSH) UUID for the example release's BOSH manifest:
  <pre class='terminal'>
    $ bosh status
      Config
        /Users/d/.bosh_config
      Director
        Name       my-bosh
        URL        https:/<span>/</span>203.0.113.6:25555
        Version    1.3012.0 (00000000)
        User       admin
        UUID       ea1b4d3e-bc26-4e83-b7a0-dd3b08cb7089
  </pre>

1. Open the BOSH manifest file `example-release.yml` in an editor. Follow the commented instructions to fill in details specific to your BOSH deployment. You already added most of these values into `bosh.yml`.

1. Set the deployment to use the manifest file:
  <pre class='terminal'>
    $ bosh deployment ./example-release.yml
  </pre>

1. Deploy the example release with `bosh deploy`, and confirm by typing `yes`:
  <pre class='terminal'>
   $ bosh deploy
       Acting as user 'admin'
       Are you sure you want to deploy? (type 'yes' to continue): yes
       Task 31 done
       Started     2015-07-31 00:04:19 UTC
       Finished    2015-07-31 00:12:52 UTC
       Duration    00:08:33<br>
       Deployed \`example-product-906ec4aecbec172c9706' to \`my-bosh'
  </pre>
To undo this step, run `bosh deployments`, copy the deployment name, and run `bosh delete deployment DEPLOYMENT-NAME`.

## <a id='confirm-deployment'></a>Step 4: Confirm Successful Deployment

1. Run `bosh vms` to confirm that the webserver is running, and record the IP address it is running at:
  <pre class='terminal'>
    $ bosh vms
      Acting as user 'admin' on 'my-bosh'
      Deployment \`example-product-906ec4aecbec172c9706'
      Director task 32
      Task 32 done
      +--------------+---------+---------------+-------------+
      | Job/index    | State   | Resource Pool | IPs         |
      +--------------+---------+---------------+-------------+
      | web_server/0 | running | vms           | 192.0.2.7 |
      +--------------+---------+---------------+-------------+
  </pre>

1. Change your key pair permissions to enable remote login with `ssh`.
  <pre class='terminal'>
    $ chmod 400 ExampleKeyPair.pem
  </pre>

1. Add your key pair to `ssh`:
  <pre class='terminal'>
    $ ssh-add ExampleKeyPair.pem
      Identity added: ExampleKeyPair.pem (ExampleKeyPair.pem)
  </pre>

1. `ssh` into your VPC as vcap@BOSH-IP-ADDRESS, using the public Elastic IP address you allocated for BOSH, and confirm:
  <pre class='terminal'>
    $ ssh vcap<span>@</span>203.0.113.6
    Are you sure you want to continue connecting (yes/no)? yes
    Ubuntu 14.04.2 LTS
    Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.19.0-22-generic x86_64)
  </pre>

1. `curl` the webserver address returned from `bosh vms` above. If the example product webserver returns its `Hello, World` page, the deployment was successful.
  <pre class='terminal'>
    $ curl 192.0.2.7
      &lt;html&gt;
       &lt;body&gt;
         &lt;h1&gt;Hello World&lt;/h1&gt;
       &lt;/body&gt;
      &lt;/html&gt;
  </pre>

## <a id='cleanup-vpc'></a>Step 5: Terminate VMs

Use the **EC2 Dashboard** to terminate the webserver and BOSH instances from your VPC before proceeding to [Preparing an Ops Manager Environment](./preparing-ops-man.html). Leave the NAT instance running. For instructions on how to terminate instances from the **EC2 Dashboard** see the [AWS documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html).

